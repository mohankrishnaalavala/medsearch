name: Deploy to GCP

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

env:
  GCP_PROJECT_ID: medsearch-ai
  GCP_ZONE: us-central1-a
  VM_NAME: medsearch-vm

jobs:
  deploy:
    name: Deploy to Google Cloud VM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          gcloud compute config-ssh --quiet

      - name: Deploy application
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="
              set -e
              echo '=== Pulling latest code ==='
              cd medsearch
              git fetch origin
              git checkout ${{ github.ref_name }}
              git pull origin ${{ github.ref_name }}
              
              echo '=== Stopping services ==='
              sudo docker compose down
              
              echo '=== Building containers ==='
              sudo docker compose build --no-cache
              
              echo '=== Starting services ==='
              sudo docker compose up -d
              
              echo '=== Waiting for services to be healthy ==='
              sleep 60
              
              echo '=== Checking service status ==='
              sudo docker compose ps
              
              echo '=== Deployment complete ==='
            "

      - name: Verify deployment
        run: |
          gcloud compute ssh ${{ env.VM_NAME }} \
            --zone=${{ env.GCP_ZONE }} \
            --command="
              cd medsearch
              
              # Check if all containers are running
              RUNNING=\$(sudo docker compose ps --filter 'status=running' --format '{{.Service}}' | wc -l)
              EXPECTED=4
              
              if [ \$RUNNING -eq \$EXPECTED ]; then
                echo '✅ All services are running'
              else
                echo '❌ Only \$RUNNING/\$EXPECTED services are running'
                sudo docker compose ps
                exit 1
              fi
              
              # Test frontend
              FRONTEND_STATUS=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:3000)
              if [ \$FRONTEND_STATUS -eq 200 ]; then
                echo '✅ Frontend is accessible'
              else
                echo '❌ Frontend returned status \$FRONTEND_STATUS'
                exit 1
              fi
              
              # Test API
              API_STATUS=\$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/health)
              if [ \$API_STATUS -eq 200 ]; then
                echo '✅ API is accessible'
              else
                echo '❌ API returned status \$API_STATUS'
                exit 1
              fi
              
              echo '✅ Deployment verification successful'
            "

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment to ${{ env.VM_NAME }} successful!"
          else
            echo "❌ Deployment to ${{ env.VM_NAME }} failed!"
            exit 1
          fi

